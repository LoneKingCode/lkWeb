<#@ template  language="C#"    debug="true" hostspecific="True"#>
<#@ include file="$(SolutionDir)\src\lkWeb.Service\Abstracts\MultipleOutputHelper.ttinclude"#>
<#@ import namespace="System"#>
<#
	 string solutionsPath = Host.ResolveAssemblyReference("$(SolutionDir)");
	var files = System.IO.Directory.GetFiles(solutionsPath+@"\src\lkWeb.Entity", "*.cs");
	var manager = Manager.Create(Host, GenerationEnvironment);
	//1.开始输出接口契约文件
    foreach (var filePath in files)
    {
		var file = new FileInfo(filePath);
		var name = file.Name.Replace("Entity.cs",string.Empty);
		var lowerName =name.ToLower();
        //定义输出文件
        manager.StartNewFile("I"+name+"Service.Partial.cs", string.Empty);
#>

using lkWeb.Service.Dto;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace lkWeb.Service.Abstracts
{
    public partial interface I<#=name#>Service
    {
	  /// <summary>
        /// 添加单个<#=lowerName#>
        /// </summary>
        /// <param name="dto"><#=lowerName#>实体</param>
        /// <returns></returns>
        Task<Result<<#=name#>Dto>> Add(<#=name#>Dto dto);
        /// <summary>
        /// 批量添加<#=lowerName#>
        /// </summary>
        /// <param name="dto"><#=lowerName#>实体集合</param>
        /// <returns></returns>
        Task<Result<List<<#=name#>Dto>>> Add(List<<#=name#>Dto> dtos);
        /// <summary>
        /// 根据id获取单个<#=lowerName#>数据
        /// </summary>
        /// <param name="id">id</param>
        /// <returns></returns>
        Task<Result<<#=name#>Dto>> GetById(int id);
		 /// <summary>
        /// 根据条件获取单个<#=lowerName#>数据
        /// </summary>
        /// <param name="exp"></param>
        /// <returns></returns>
        Task<Result<<#=name#>Dto>> GetByExp(Expression<Func<<#=name#>Dto, bool>> exp);
        /// <summary>
        /// 根据id删除<#=lowerName#>数据
        /// </summary>
        /// <param name="id">id</param>
        /// <returns></returns>
        Task<Result<<#=name#>Dto>> Delete(int id);
        /// <summary>
        /// 批量删除<#=lowerName#>数据
        /// </summary>
        /// <param name="ids">id集合</param>
        /// <returns></returns>
        Task<Result<List<<#=name#>Dto>>> Delete(List<int> ids);
        /// <summary>
        /// 删除单个数据
        /// </summary>
        /// <param name="dto"><#=lowerName#>实体</param>
        /// <returns></returns>
        Task<Result<<#=name#>Dto>> Delete(<#=name#>Dto dto);
        /// <summary>
        /// 根据条件删除<#=lowerName#>数据
        /// </summary>
        /// <param name="exp"></param>
        /// <returns></returns>
        Task<Result<<#=name#>Dto>> Delete(Expression<Func<<#=name#>Dto, bool>> exp);
        /// <summary>
        /// 更新单个数据
        /// </summary>
        /// <param name="dto"><#=lowerName#>实体</param>
        /// <returns></returns>
        Task<Result<<#=name#>Dto>> Update(<#=name#>Dto dto);
        /// <summary>
        /// 批量更新数据
        /// </summary>
        /// <param name="dto"><#=lowerName#>实体集合</param>
        /// <returns></returns>
        Task<Result<List<<#=name#>Dto>>> Update(List<<#=name#>Dto> dtos);
        /// <summary>
        /// 获取<#=lowerName#>分页数据
        /// </summary>
        /// <param name="queryBase">基础查询对象</param>
        /// <param name="queryExp">queryExp</param>
        /// <param name="orderBy">要排序的列名</param>
        /// <param name="orderDir">asc or desc</param>
        /// <returns></returns>
        Task<ResultDto<<#=name#>Dto>> GetPageData(QueryBase queryBase,
            Expression<Func<<#=name#>Dto, bool>> queryExp, string orderBy, string orderDir);
        /// <summary>
        /// 根据条件获取列表
        /// </summary>
        /// <param name="queryExp">条件</param>
        /// <returns></returns>
        Task<ResultDto<<#=name#>Dto>> GetList(Expression<Func<<#=name#>Dto, bool>> queryExp);
	}
}

<#
		// 结束输出文件
		manager.EndBlock();
}
	//2.开始生成契约实现文件
	foreach (var filePath in files)
    {
		var file = new FileInfo(filePath);
		var name = file.Name.Replace("Entity.cs",string.Empty);
		var lowerName = name.ToLower();
        //定义输出文件
        manager.StartNewFile(name+"Service.Partial.cs", string.Empty);

#>

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text;
using lkWeb.Service.Dto;
using lkWeb.Entity;
using System.Linq;
using lkWeb.Core.Extensions;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using AutoMapper;

namespace lkWeb.Service.Abstracts
{
    public partial class <#=name#>Service : ServiceBase<<#=name#>Entity>, I<#=name#>Service
    {
		public <#=name#>Service(IMapper mapper):base(mapper)
		{

		}
		    /// <summary>
        ///添加单个<#=lowerName#>
        /// </summary>
        /// <param name="dto"><#=lowerName#>实体</param>
        /// <returns></returns>
        public async Task<Result<<#=name#>Dto>> Add(<#=name#>Dto dto)
        {
            using (var db = GetDb())
            {
                var result = new Result<<#=name#>Dto>();
                var ds = GetDbSet(db);
                var entity = MapTo<<#=name#>Dto, <#=name#>Entity>(dto);
                await ds.AddAsync(entity);
                result.flag = (await db.SaveChangesAsync()) > 0;
                return result;
            }
        }
        /// <summary>
        /// 批量添加<#=lowerName#>
        /// </summary>
        /// <param name="dtos"><#=lowerName#>集合</param>
        /// <returns></returns>
        public async Task<Result<List<<#=name#>Dto>>> Add(List<<#=name#>Dto> dtos)
        {
            using (var db = GetDb())
            {
                var result = new Result<List<<#=name#>Dto>>();
                var ds = GetDbSet(db);
                var entities = MapTo<List<<#=name#>Dto>, List<<#=name#>Entity>>(dtos);
                ds.AddRange(entities);
                result.flag = (await db.SaveChangesAsync()) > 0;
                return result;
            }
        }
        /// <summary>
        /// 更新单个数据
        /// </summary>
        /// <param name="dto"><#=lowerName#>实体</param>
        /// <returns></returns>
        public async Task<Result<<#=name#>Dto>> Update(<#=name#>Dto dto)
        {
            using (var db = GetDb())
            {
                var result = new Result<<#=name#>Dto>();
                db.Update(MapTo<<#=name#>Dto, <#=name#>Entity>(dto));
                result.flag = (await db.SaveChangesAsync()) > 0;
                return result;
            }
        }
        /// <summary>
        /// 批量更新<#=lowerName#>
        /// </summary>
        /// <param name="dtos"><#=lowerName#>集合</param>
        /// <returns></returns>
        public async Task<Result<List<<#=name#>Dto>>> Update(List<<#=name#>Dto> dtos)
        {
            using (var db = GetDb())
            {
                var result = new Result<List<<#=name#>Dto>>();
                var ds = GetDbSet(db);
                var entities = MapTo<List<<#=name#>Dto>, List<<#=name#>Entity>>(dtos);
                ds.UpdateRange(entities);
                result.flag = (await db.SaveChangesAsync()) > 0;
                return result;
            }
        }
        /// <summary>
        /// 根据id删除单个<#=lowerName#>
        /// </summary>
        /// <param name="id">id</param>
        /// <returns></returns>
        public async Task<Result<<#=name#>Dto>> Delete(int id)
        {
            using (var db = GetDb())
            {
                var result = new Result<<#=name#>Dto>();
                var ds = GetDbSet(db);
                var entity = ds.FirstOrDefault(item => item.Id == id);
                ds.Remove(entity);
                result.flag = (await db.SaveChangesAsync()) > 0;
                return result;
            }
        }
        /// <summary>
        /// 根据id批量删除<#=lowerName#>
        /// </summary>
        /// <param name="ids">id集合</param>
        /// <returns></returns>
        public async Task<Result<List<<#=name#>Dto>>> Delete(List<int> ids)
        {
            using (var db = GetDb())
            {
                var result = new Result<List<<#=name#>Dto>>();
                foreach (var id in ids)
                {
                    var ds = GetDbSet(db);
                    var entity = await ds.FindAsync(id);
                    ds.Remove(entity);
                }
                result.flag = (await db.SaveChangesAsync()) > 0;
                return result;
            }
        }
        /// <summary>
        /// 删除单个<#=lowerName#>
        /// </summary>
        /// <param name="dto"><#=lowerName#>实体</param>
        /// <returns></returns>
        public async Task<Result<<#=name#>Dto>> Delete(<#=name#>Dto dto)
        {
            using (var db = GetDb())
            {
                var result = new Result<<#=name#>Dto>();
                var ds = GetDbSet(db);
                var entity = MapTo<<#=name#>Dto, <#=name#>Entity>(dto);
                ds.Remove(entity);
                result.flag = (await db.SaveChangesAsync()) > 0;
                return result;
            }
        }
        /// <summary>
        /// 根据id获取单个数据
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public async Task<Result<<#=name#>Dto>> GetById(int id)
        {
            using (var db = GetDb())
            {
                var result = new Result<<#=name#>Dto>();
                var ds = GetDbSet(db);
                var entity = await ds.FindAsync(id);
			    if (entity != null)
                {
					 result.data = MapTo<<#=name#>Entity, <#=name#>Dto>(entity);
					 result.flag = true;
		    	}
                return result;
            }
        }
        /// <summary>
        /// 获取<#=lowerName#>分页数据
        /// </summary>
        /// <param name="queryBase">基础查询对象</param>
        /// <param name="queryExp">queryExp</param>
        /// <param name="orderBy">要排序的列名</param>
        /// <param name="orderDir">asc or desc</param>
        /// <returns></returns>
        public async Task<ResultDto<<#=name#>Dto>> GetPageData(QueryBase queryBase, Expression<Func<<#=name#>Dto, bool>> queryExp, string orderBy, string orderDir)
        {
            using (var db = GetDb())
            {
                var ds = db.Set<<#=name#>Entity>();
                var result = new ResultDto<<#=name#>Dto>();
                var where = queryExp.Cast<<#=name#>Dto, <#=name#>Entity, bool>();
                var isAsc = !string.IsNullOrEmpty(orderDir) && orderDir.ToLower() != "desc";
                //暂时没用到这个
                Expression<Func<<#=name#>Dto, int>> orderExp = item => item.Id;
                var _orderExp = orderExp.Cast<<#=name#>Dto, <#=name#>Entity, int>();
                var list = await GetQuery(queryBase, ds, _orderExp, where, isAsc);
                result.data = MapTo<List<<#=name#>Entity>, List<<#=name#>Dto>>(list.Item1);
                result.recordsTotal = list.Item2;
                result.pageIndex = queryBase.Start;
                result.pageSize = queryBase.Length;
                return result;
            }
        }
        /// <summary>
        /// 根据条件获取列表
        /// </summary>
        /// <param name="queryExp">条件</param>
        /// <returns></returns>
        public async Task<ResultDto<<#=name#>Dto>> GetList(Expression<Func<<#=name#>Dto, bool>> queryExp)
        {
            using (var db = GetDb())
            {
                var _queryExp = queryExp.Cast<<#=name#>Dto, <#=name#>Entity, bool>();
                var ds = GetDbSet(db);
                var temp = await ds.Where(_queryExp).OrderBy(item => item.Id).ToListAsync();
                var dtoData = MapTo<List<<#=name#>Entity>, List<<#=name#>Dto>>(temp);
                var result = new ResultDto<<#=name#>Dto>
                {
                    data = dtoData,
                    recordsTotal = dtoData.Count,
                    pageSize = 0,
                    pageIndex = 0
                };
                return result;
            }
        }
		 /// <summary>
        /// 根据条件获取单个<#=lowerName#>数据
        /// </summary>
        /// <param name="exp"></param>
        /// <returns></returns>
        public async Task<Result<<#=name#>Dto>> GetByExp(Expression<Func<<#=name#>Dto, bool>> exp)
        {
            using (var db = GetDb())
            {
                var result = new Result<<#=name#>Dto>();
                var ds = GetDbSet(db);
                var _exp = exp.Cast<<#=name#>Dto, <#=name#>Entity, bool>();
                var entity = await ds.Where(_exp).FirstOrDefaultAsync();
				   if (entity != null)
                 {
				    result.data = MapTo<<#=name#>Entity,<#=name#>Dto>(entity);
					result.flag=true;
				 }
                return result;
            }
        }
        /// <summary>
        /// 根据条件删除<#=lowerName#>数据
        /// </summary>
        /// <param name="exp"></param>
        /// <returns></returns>
        public async Task<Result<<#=name#>Dto>> Delete(Expression<Func<<#=name#>Dto, bool>> exp)
        {
            using (var db = GetDb())
            {
                var result = new Result<<#=name#>Dto>();
                var ds = GetDbSet(db);
                var _exp = exp.Cast<<#=name#>Dto, <#=name#>Entity, bool>();
                var entities = await ds.Where(_exp).ToListAsync();
                ds.RemoveRange(entities);
                result.flag = (await db.SaveChangesAsync()) > 0;
                return result;
            }
        }
	}

}



<#
    // 结束输出文件
    manager.EndBlock();
}
#>


<#
	manager.StartNewFile("AutoMapperConfiguration.Partial.cs", string.Empty);
#>
using AutoMapper;
using lkWeb.Entity;
using lkWeb.Service.Dto;
namespace lkWeb.Service
{
public partial class AutoMapperConfiguration : Profile
{
        /// <summary>
        /// 自定义AutoMapper配置
        /// </summary>
     public void AutoMapperConfiguration_Auto()
       {

		  <#
	//1.开始输出接口契约文件
			foreach (var filePath in files)
            {
				var file = new FileInfo(filePath);
				var name = file.Name.Replace("Entity.cs",string.Empty);
				var lowerName =name.ToLower();
				//定义输出文件
#>
				/*	CreateMap<<#=name#>Entity, <#=name#>Dto>();
					CreateMap<<#=name#>Dto, <#=name#>Entity>();
					*/
<#
			}
#>

        }
}
}

<#
    // 结束输出文件
    manager.EndBlock();
	//执行编译
	manager.Process(true);
#>